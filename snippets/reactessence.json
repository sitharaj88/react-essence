{
  "ReactEssence Class Component": {
    "prefix": "rxn-class",
    "body": [
      "import React, { Component } from 'react';",
      "",
      "class ${1:ComponentName} extends Component {",
      "  render() {",
      "    return (",
      "      <div>",
      "        ${2:content}",
      "      </div>",
      "    );",
      "  }",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Create a React class component with ReactEssence"
  },

  "ReactEssence Functional Component": {
    "prefix": "rxn-func",
    "body": [
      "import React from 'react';",
      "",
      "const ${1:ComponentName} = () => {",
      "  return (",
      "    <div>",
      "      ${2:content}",
      "    </div>",
      "  );",
      "};",
      "",
      "export default $1;"
    ],
    "description": "Create a React functional component with ReactEssence"
  },

  "ReactEssence useState Hook": {
    "prefix": "rxn-usestate",
    "body": [
      "const [${1:state}, set${2:State}] = useState(${3:initialValue});"
    ],
    "description": "Create a useState hook with ReactEssence"
  },
  "ReactEssence useEffect Hook": {
    "prefix": "rxn-useeffect",
    "body": ["useEffect(() => {", "  ${1:effect}", "}, [${2:dependencies}]);"],
    "description": "Create a useEffect hook with ReactEssence"
  },

  "ReactEssence PropTypes": {
    "prefix": "rxn-proptypes",
    "body": [
      "${1:ComponentName}.propTypes = {",
      "  ${2:propName}: PropTypes.${3:type},",
      "};"
    ],
    "description": "Add PropTypes to a React component with ReactEssence"
  },

  "ReactEssence Default Props": {
    "prefix": "rxn-defaultprops",
    "body": [
      "${1:ComponentName}.defaultProps = {",
      "  ${2:propName}: ${3:value},",
      "};"
    ],
    "description": "Add defaultProps to a React component with ReactEssence"
  },

  "ReactEssence useContext Hook": {
    "prefix": "rxn-usecontext",
    "body": ["const ${1:contextValue} = useContext(${2:Context});"],
    "description": "Create a useContext hook with ReactEssence"
  },

  "ReactEssence Context Provider": {
    "prefix": "rxn-context-provider",
    "body": [
      "export const ${1:Context} = React.createContext();",
      "",
      "export const ${2:ContextProvider} = ({ children }) => {",
      "  const [${3:state}, set${4:State}] = useState(${5:initialValue});",
      "",
      "  return (",
      "    <${1:Context}.Provider value={{ ${3:state}, set${4:State} }}>",
      "      {children}",
      "    </${1:Context}.Provider>",
      "  );",
      "};"
    ],
    "description": "Create a Context Provider component with ReactEssence"
  },

  "ReactEssence useReducer Hook": {
    "prefix": "rxn-usereducer",
    "body": [
      "const [${1:state}, dispatch] = useReducer(${2:reducer}, ${3:initialState});"
    ],
    "description": "Create a useReducer hook with ReactEssence"
  },

  "ReactEssence Custom Hook": {
    "prefix": "rxn-custom-hook",
    "body": [
      "import { useState, useEffect } from 'react';",
      "",
      "const use${1:CustomHook} = (${2:params}) => {",
      "  const [${3:state}, set${4:State}] = useState(${5:initialValue});",
      "",
      "  useEffect(() => {",
      "    ${6:effect}",
      "  }, [${7:dependencies}]);",
      "",
      "  return ${3:state};",
      "};",
      "",
      "export default use$1;"
    ],
    "description": "Create a custom hook with ReactEssence"
  },

  "ReactEssence React.memo": {
    "prefix": "rxn-memo",
    "body": [
      "import React, { memo } from 'react';",
      "",
      "const ${1:ComponentName} = memo(() => {",
      "  return (",
      "    <div>",
      "      ${2:content}",
      "    </div>",
      "  );",
      "});",
      "",
      "export default $1;"
    ],
    "description": "Create a React.memo component with ReactEssence"
  },

  "ReactEssence Styled Component": {
    "prefix": "rxn-styled",
    "body": [
      "import styled from 'styled-components';",
      "",
      "const ${1:ComponentName} = styled.${2:element}`",
      "  ${3:styles}",
      "`;"
    ],
    "description": "Create a styled-component with ReactEssence"
  },

  "ReactEssence forwardRef": {
    "prefix": "rxn-forwardref",
    "body": [
      "import React, { forwardRef } from 'react';",
      "",
      "const ${1:ComponentName} = forwardRef((props, ref) => {",
      "  return (",
      "    <div ref={ref}>",
      "      ${2:content}",
      "    </div>",
      "  );",
      "});",
      "",
      "export default $1;"
    ],
    "description": "Create a React.forwardRef component with ReactEssence"
  },

  "ReactEssence Error Boundary": {
    "prefix": "rxn-error-boundary",
    "body": [
      "import React, { Component } from 'react';",
      "",
      "class ${1:ErrorBoundary} extends Component {",
      "  constructor(props) {",
      "    super(props);",
      "    this.state = { hasError: false };",
      "  }",
      "",
      "  static getDerivedStateFromError(error) {",
      "    return { hasError: true };",
      "  }",
      "",
      "  componentDidCatch(error, errorInfo) {",
      "    console.error('ErrorBoundary caught an error', error, errorInfo);",
      "  }",
      "",
      "  render() {",
      "    if (this.state.hasError) {",
      "      return <h1>Something went wrong.</h1>;",
      "    }",
      "",
      "    return this.props.children;",
      "  }",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Create an Error Boundary with ReactEssence"
  },

  "ReactEssence Fragment": {
    "prefix": "rxn-fragment",
    "body": ["<React.Fragment>", "  ${1:content}", "</React.Fragment>"],
    "description": "Create a React Fragment with ReactEssence"
  },

  "ReactEssence JSX Spread Attributes": {
    "prefix": "rxn-jsx-spread",
    "body": ["<${1:Component} {...${2:props}} />"],
    "description": "Create a JSX spread attributes pattern with ReactEssence"
  },

  "ReactEssence HOC": {
    "prefix": "rxn-hoc",
    "body": [
      "import React from 'react';",
      "",
      "const ${1:withHOC} = (WrappedComponent) => {",
      "  return class extends React.Component {",
      "    render() {",
      "      return <WrappedComponent {...this.props} />;",
      "    }",
      "  };",
      "};",
      "",
      "export default $1;"
    ],
    "description": "Create a Higher-Order Component (HOC) with ReactEssence"
  },

  "ReactEssence Lazy and Suspense": {
    "prefix": "rxn-lazy-suspense",
    "body": [
      "import React, { lazy, Suspense } from 'react';",
      "",
      "const ${1:LazyComponent} = lazy(() => import('${2:./LazyComponent}'));",
      "",
      "const ${3:ComponentName} = () => {",
      "  return (",
      "    <Suspense fallback={<div>Loading...</div>}>",
      "      <${1:LazyComponent} />",
      "    </Suspense>",
      "  );",
      "};",
      "",
      "export default $3;"
    ],
    "description": "Create a lazy-loaded component with Suspense in ReactEssence"
  },

  "ReactEssence JSX Ternary": {
    "prefix": "rxn-jsx-ternary",
    "body": [
      "${1:condition} ? ${2:<TrueComponent />} : ${3:<FalseComponent />}"
    ],
    "description": "Create a JSX conditional rendering pattern with ReactEssence"
  },

  "ReactEssence JSX Map": {
    "prefix": "rxn-jsx-map",
    "body": [
      "${1:items}.map(${2:item} => (",
      "  <${3:Component} key={${2:item}.${4:id}} ${5:prop}={${2:item}.${6:value}} />",
      "))"
    ],
    "description": "Create a JSX map function pattern with ReactEssence"
  }
}
